<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hadoop | bill crook]]></title>
  <link href="http://bill.crook.io/blog/categories/hadoop/atom.xml" rel="self"/>
  <link href="http://bill.crook.io/"/>
  <updated>2014-10-29T13:13:00-04:00</updated>
  <id>http://bill.crook.io/</id>
  <author>
    <name><![CDATA[Bill Crook]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Date-based windowing functions in Hive]]></title>
    <link href="http://bill.crook.io/blog/2014/10/24/date-based-windowing-functions-in-hive/"/>
    <updated>2014-10-24T11:16:00-04:00</updated>
    <id>http://bill.crook.io/blog/2014/10/24/date-based-windowing-functions-in-hive</id>
    <content type="html"><![CDATA[<p>At my current gig, when migrating our data warehouse to Hive, I had a bit of trouble tracking down documentation on date-based windowing function support in Hive. I had to piece together information from a few sources, so I figured this might be useful to others. At the time of this post, the Hive <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+WindowingAndAnalytics" title="Windowing functions">wiki page on windowing functions</a> makes no mention of range-based windows, but I did find so elsewhere. There are a couple Hive <a href="https://issues.apache.org/jira/browse/HIVE-4197">jira</a> <a href="https://issues.apache.org/jira/browse/HIVE-4112">tickets</a> which mention support for range-based windows. Unfortunately, neither discuss date-based ranges which is my use case. A bit more digging turned up a valuable <a href="http://www.qubole.com/big-data-analytics-using-window-functions">interview</a> with one of the Hortonworks committers where he sheds a bit more light on the topic:</p>

<p><blockquote><p>The window ranges today are numeric constants, whereas, in the spec, you can have arbitrary numerical expressions. And in Hive, you donâ€™t have date intervals. So if you want to do date-based windows, you pretty much have to break down the date into components, and treat each component as a int.</p><footer><strong>Harish Butani <a href="http://www.qubole.com/big-data-analytics-using-window-functions">http://www.qubole.com/big-data-analytics-using-window-functions</a></strong></footer></blockquote></p>

<p>What this tells us is we need to convert the date to a numeric constant when using it in a range window. Let&rsquo;s walk through an example.</p>

<p>Suppose we have the following transaction data:</p>

<table>
<thead>
<tr>
<th align="center">user</th>
<th align="left">store       </th>
<th align="center">purchase_date</th>
<th align="right">amount</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-01</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-02</td>
<td align="right">3</td>
</tr>
<tr>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-03</td>
<td align="right">2</td>
</tr>
<tr>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-04</td>
<td align="right">4</td>
</tr>
<tr>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-05</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-06</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-07</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-01</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-02</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-03</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-04</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-05</td>
<td align="right">5</td>
</tr>
<tr>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-06</td>
<td align="right">5</td>
</tr>
<tr>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-07</td>
<td align="right">5</td>
</tr>
</tbody>
</table>


<p><p/>
Now suppose we want to answer the question: What is the purchase amount for each transaction and what is the N-day purchase amount total leading up to that transaction? The following query could answer that question using a range-based window.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Date-based Windowing </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="o">*</span><span class="p">,</span>
</span><span class='line'> <span class="k">sum</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span> <span class="n">over</span>
</span><span class='line'>   <span class="p">(</span><span class="n">partition</span> <span class="k">by</span> <span class="k">user</span> <span class="k">order</span> <span class="k">by</span> <span class="n">unix_timestamp</span><span class="p">(</span><span class="n">purchase_date</span><span class="p">)</span> <span class="n">RANGE</span> <span class="mi">172800</span> <span class="n">PRECEDING</span><span class="p">)</span>
</span><span class='line'> <span class="k">from</span> <span class="n">transactions</span>
</span><span class='line'> <span class="k">order</span> <span class="k">by</span> <span class="k">user</span><span class="p">,</span> <span class="n">purchase_date</span> <span class="k">asc</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A few things to note about the query. First, we want to do this on a user-basis, so we partition by user. Next, we must use <em>unix_timestamp</em> to convert the date to a numeric constant in seconds. This will be the value in seconds since the <a href="https://en.wikipedia.org/wiki/Unix_time#Encoding_time_as_a_number">unix epoch</a>. Finally, the <em>RANGE X PRECEDING</em> says, go backwards from the current row until the value of the column used in the <em>order by</em> clause changes by <em>X</em> amount or we hit the partition boundary. In this example I use 172800 which is 2 days in seconds plus the current row, giving me a 3 day window.</p>

<p>Here is the result set:</p>

<table>
<thead>
<tr>
<th align="left">row_num</th>
<th align="center">user</th>
<th align="left">store       </th>
<th align="center">purchase_date</th>
<th align="right">amount</th>
<th align="right">n_day_total</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">1</td>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-01</td>
<td align="right">1</td>
<td align="right">1</td>
</tr>
<tr>
<td align="left">2</td>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-02</td>
<td align="right">3</td>
<td align="right">4</td>
</tr>
<tr>
<td align="left">3</td>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-03</td>
<td align="right">2</td>
<td align="right">6</td>
</tr>
<tr>
<td align="left">4</td>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-04</td>
<td align="right">4</td>
<td align="right">9</td>
</tr>
<tr>
<td align="left">5</td>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-05</td>
<td align="right">1</td>
<td align="right">7</td>
</tr>
<tr>
<td align="left">6</td>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-06</td>
<td align="right">1</td>
<td align="right">6</td>
</tr>
<tr>
<td align="left">7</td>
<td align="center">42</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-07</td>
<td align="right">1</td>
<td align="right">3</td>
</tr>
<tr>
<td align="left">8</td>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-01</td>
<td align="right">1</td>
<td align="right">1</td>
</tr>
<tr>
<td align="left">9</td>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-02</td>
<td align="right">1</td>
<td align="right">2</td>
</tr>
<tr>
<td align="left">10</td>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-03</td>
<td align="right">1</td>
<td align="right">3</td>
</tr>
<tr>
<td align="left">11</td>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-04</td>
<td align="right">1</td>
<td align="right">3</td>
</tr>
<tr>
<td align="left">12</td>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-05</td>
<td align="right">5</td>
<td align="right">7</td>
</tr>
<tr>
<td align="left">13</td>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-06</td>
<td align="right">5</td>
<td align="right">11</td>
</tr>
<tr>
<td align="left">14</td>
<td align="center">44</td>
<td align="left">petes coffee</td>
<td align="center">2014-01-07</td>
<td align="right">5</td>
<td align="right">15</td>
</tr>
</tbody>
</table>


<p><p/></p>

<p>Let&rsquo;s explain some of the results.</p>

<ul>
<li>Row 9 &ndash; The n_day_total is 2 because only row 8 is included. Row 7 is for the previous user, which is the partition boundary, so the range traversal ceases.</li>
<li>Row 10 &ndash; Here we have a full 3 day range since it does not bump up against the partition boundary. The n-day total is 1+1+1 for the dates 2014-01-01, 2014-01-02 and 2014-01-03.</li>
<li>Row 14 &ndash; This proves that the window is sliding along with the current row. The n-day total is 5+5+5 for the dates 2014-01-05, 2014-01-06 and 2014-01-07.</li>
</ul>


<p>Hope this is useful to someone!</p>
]]></content>
  </entry>
  
</feed>
